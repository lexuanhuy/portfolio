import { useState, useEffect } from "react";
import "./FunFacts.css";

export default function FunFacts() {
  const [currentFact, setCurrentFact] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  const funFacts = [
    {
      text: "Debugging: Qu√° tr√¨nh lo·∫°i b·ªè bug v√† t·∫°o ra bug m·ªõi",
      emoji: "üêõ",
      category: "Debug"
    },
    {
      text: "Code kh√¥ng ch·∫°y? U·ªëng c√† ph√™ v√† th·ª≠ l·∫°i!",
      emoji: "‚òï",
      category: "Life Hack"
    },
    {
      text: "99% l·ªói l√† do l·ªói ng∆∞·ªùi d√πng. 1% c√≤n l·∫°i l√† do t√¥i",
      emoji: "üòÖ",
      category: "Truth"
    },
    {
      text: "Git commit message: 'Fix stuff' - C√≥ ai hi·ªÉu kh√¥ng?",
      emoji: "üìù",
      category: "Git"
    },
    {
      text: "Stack Overflow: N∆°i copy-paste tr·ªü th√†nh ngh·ªá thu·∫≠t",
      emoji: "üìã",
      category: "Development"
    },
    {
      text: "Code review: 'T·∫°i sao b·∫°n l√†m th·∫ø n√†y?' - 'V√¨ n√≥ ch·∫°y ƒë∆∞·ª£c'",
      emoji: "ü§∑‚Äç‚ôÇÔ∏è",
      category: "Code Review"
    },
    {
      text: "Documentation: Vi·∫øt cho ng∆∞·ªùi kh√°c ƒë·ªçc, kh√¥ng ph·∫£i cho m√¨nh",
      emoji: "üìö",
      category: "Best Practice"
    },
    {
      text: "Testing: T√¨m bug tr∆∞·ªõc khi kh√°ch h√†ng t√¨m th·∫•y",
      emoji: "üß™",
      category: "Testing"
    }
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setIsAnimating(true);
      setTimeout(() => {
        setCurrentFact((prev) => (prev + 1) % funFacts.length);
        setIsAnimating(false);
      }, 300);
    }, 4000);

    return () => clearInterval(interval);
  }, [funFacts.length]);

  const handleNext = () => {
    setIsAnimating(true);
    setTimeout(() => {
      setCurrentFact((prev) => (prev + 1) % funFacts.length);
      setIsAnimating(false);
    }, 300);
  };

  const handlePrev = () => {
    setIsAnimating(true);
    setTimeout(() => {
      setCurrentFact((prev) => (prev - 1 + funFacts.length) % funFacts.length);
      setIsAnimating(false);
    }, 300);
  };

  return (
    <div className="fun-facts-container">
      <div className="fun-facts-header">
        <h3 className="fun-facts-title">V√†i th·ª© th√∫ v·ªã t√¥i copy l·∫°i</h3>
        {/* <p className="fun-facts-subtitle">Nh·ªØng ƒëi·ªÅu th√∫ v·ªã v·ªÅ cu·ªôc s·ªëng l·∫≠p tr√¨nh vi√™n</p> */}
      </div>
      
      <div className="fact-display">
        <div className={`fact-card ${isAnimating ? 'animating' : ''}`}>
          <div className="fact-emoji">{funFacts[currentFact].emoji}</div>
          <div className="fact-content">
            <p className="fact-text">{funFacts[currentFact].text}</p>
            <span className="fact-category">{funFacts[currentFact].category}</span>
          </div>
        </div>
        
        <div className="fact-navigation">
          <button className="nav-btn prev-btn" onClick={handlePrev}>
            ‚Üê
          </button>
          <div className="fact-indicators">
            {funFacts.map((_, index) => (
              <span 
                key={index} 
                className={`indicator ${index === currentFact ? 'active' : ''}`}
                onClick={() => setCurrentFact(index)}
              />
            ))}
          </div>
          <button className="nav-btn next-btn" onClick={handleNext}>
            ‚Üí
          </button>
        </div>
      </div>
      
      <div className="fun-facts-footer">
        <p className="footer-text">
          "L·∫≠p tr√¨nh vi√™n gi·ªèi nh·∫•t l√† ng∆∞·ªùi bi·∫øt copy-paste t·ª´ m·ªçi n∆°i" 
          <span className="footer-emoji">üòÑ</span>
        </p>
      </div>
    </div>
  );
} 